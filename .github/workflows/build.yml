name: build

env:
  TARGET_PYTHON: "python3.13 python3.12 python3.11"

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04-arm
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Calculate source hash
        id: source-hash
        run: |
          HASH=$(find pyrxing reader_core -type f \( -name '*.rs' -o -name '*.toml' -o -name '*.lock' \) 2>/dev/null | sort | xargs cat | sha256sum | cut -d' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
      - name: Check build cache
        id: build-cache
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/cache@v4
        with:
          path: pyrxing/dist
          key: wheels-linux-${{ matrix.platform.target }}-${{ steps.source-hash.outputs.hash }}
      - name: copy README.md
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          cp README.md pyrxing
      - name: Cache Rust dependencies
        if: steps.build-cache.outputs.cache-hit != 'true'
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: pyrxing
          key: ${{ runner.os }}-${{ matrix.platform.target }}
      - name: Build wheels
        id: build
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          case "${{ matrix.platform.target }}" in
            "x86_64")  RUST_TARGET="stable-x86_64-unknown-linux-gnu" ;;
            "aarch64") RUST_TARGET="stable-aarch64-unknown-linux-gnu" ;;
          esac

          case "${{ matrix.platform.target }}" in
            "x86_64")  DOCKER_PLATFORM="linux/amd64" ;;
            "aarch64") DOCKER_PLATFORM="linux/arm64" ;;
          esac

          docker run --rm \
            --platform $DOCKER_PLATFORM \
            -v $(pwd):/workspace \
            -w /workspace/pyrxing \
            python:3.13.5-slim \
            sh -c "
              apt-get update && apt-get install -y build-essential cmake g++ gcc ninja-build curl
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain $RUST_TARGET &&
              . ~/.cargo/env &&
              pip install maturin patchelf &&
              maturin build --release -i ${TARGET_PYTHON} --out dist
            "
      - name: Upload wheels
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: pyrxing/dist
          if-no-files-found: ignore
          overwrite: true

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04-arm
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Calculate source hash
        id: source-hash
        run: |
          HASH=$(find pyrxing reader_core -type f \( -name '*.rs' -o -name '*.toml' -o -name '*.lock' \) 2>/dev/null | sort | xargs cat | sha256sum | cut -d' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
      - name: Check build cache
        id: build-cache
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/cache@v4
        with:
          path: pyrxing/dist
          key: wheels-musllinux-${{ matrix.platform.target }}-${{ steps.source-hash.outputs.hash }}
      - name: copy README.md
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          cp README.md pyrxing
      - name: Cache Rust dependencies
        if: steps.build-cache.outputs.cache-hit != 'true'
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: pyrxing
          key: ${{ runner.os }}-${{ matrix.platform.target }}
      - name: Build wheels
        id: build
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          case "${{ matrix.platform.target }}" in
            "x86_64")  RUST_TARGET="stable-x86_64-unknown-linux-musl" ;;
            "aarch64") RUST_TARGET="stable-aarch64-unknown-linux-musl" ;;
          esac

          case "${{ matrix.platform.target }}" in
            "x86_64")  DOCKER_PLATFORM="linux/amd64" ;;
            "aarch64") DOCKER_PLATFORM="linux/arm64" ;;
          esac

          docker run --rm \
            --platform $DOCKER_PLATFORM \
            -v $(pwd):/workspace \
            -w /workspace/pyrxing \
            python:3.13.5-alpine3.22 \
            sh -c "
              apk add --no-cache build-base cmake g++ gcc musl-dev git ninja curl &&
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain $RUST_TARGET &&
              source ~/.cargo/env &&
              pip install maturin patchelf &&
              maturin build --release -i ${TARGET_PYTHON} --out dist
            "
      - name: Upload wheels
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: pyrxing/dist
          if-no-files-found: ignore
          overwrite: true

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Calculate source hash
        id: source-hash
        run: |
          HASH=$(find pyrxing reader_core -type f \( -name '*.rs' -o -name '*.toml' -o -name '*.lock' \) 2>/dev/null | sort | xargs cat | shasum -a 256 | cut -d' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
      - name: Check build cache
        id: build-cache
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/cache@v4
        with:
          path: pyrxing/dist
          key: wheels-macos-${{ matrix.platform.target }}-${{ steps.source-hash.outputs.hash }}
      - name: copy README.md
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          cp README.md pyrxing
      - name: Cache Rust dependencies
        if: steps.build-cache.outputs.cache-hit != 'true'
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: pyrxing
          key: ${{ runner.os }}-${{ matrix.platform.target }}
      - name: Build wheels
        id: build
        if: steps.build-cache.outputs.cache-hit != 'true'
        uses: PyO3/maturin-action@v1
        with:
          working-directory: pyrxing
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: pyrxing/dist
          if-no-files-found: ignore
          overwrite: true

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Calculate source hash
        id: source-hash
        shell: bash
        run: |
          HASH=$(find pyrxing reader_core -type f \( -name '*.rs' -o -name '*.toml' -o -name '*.lock' \) 2>/dev/null | sort | xargs cat | sha256sum | cut -d' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
      - name: Check build cache
        id: build-cache
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/cache@v4
        with:
          path: pyrxing/dist
          key: wheels-windows-${{ matrix.platform.target }}-${{ steps.source-hash.outputs.hash }}
      - name: copy README.md
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          cp README.md pyrxing
      - name: Cache Rust dependencies
        if: steps.build-cache.outputs.cache-hit != 'true'
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: pyrxing
          key: ${{ runner.os }}-${{ matrix.platform.target }}
      - name: Build wheels
        id: build
        if: steps.build-cache.outputs.cache-hit != 'true'
        uses: PyO3/maturin-action@v1
        with:
          working-directory: pyrxing
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: pyrxing/dist
          if-no-files-found: ignore
          overwrite: true

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: copy README.md
        run: |
          cp README.md pyrxing
      - name: Build sdist
        id: build
        uses: PyO3/maturin-action@v1
        with:
          working-directory: pyrxing
          command: sdist
          args: --out dist
      - name: Upload sdist
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: pyrxing/dist
          if-no-files-found: ignore
          overwrite: true

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, musllinux, macos, windows, sdist]
    permissions:
      # OIDC token for Trusted Publishing
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true
          attestations: true
