name: build

env:
  TARGET_PYTHON: "python3.13 python3.12 python3.11"

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: copy README.md
        run: |
          cp README.md pyrxing
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: pyrxing
          key: ${{ runner.os }}-${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: pyrxing
          target: ${{ matrix.platform.target }}
          args: --release --out dist --interpreter $TARGET_PYTHON
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: pyrxing/dist
          if-no-files-found: ignore
          overwrite: true

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04-arm
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: copy README.md
        run: |
          cp README.md pyrxing
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: pyrxing
          key: ${{ runner.os }}-${{ matrix.platform.target }}
      - name: Build wheels
        run: |
          case "${{ matrix.platform.target }}" in
            "x86_64")  RUST_TARGET="stable-x86_64-unknown-linux-musl" ;;
            "aarch64") RUST_TARGET="stable-aarch64-unknown-linux-musl" ;;
          esac
          
          case "${{ matrix.platform.target }}" in
            "x86_64")  DOCKER_PLATFORM="linux/amd64" ;;
            "aarch64") DOCKER_PLATFORM="linux/arm64" ;;
          esac
          
          docker run --rm \
            --platform $DOCKER_PLATFORM \
            -v $(pwd):/workspace \
            -w /workspace/pyrxing \
            python:3.13.5-alpine3.22 \
            sh -c "
              apk add --no-cache build-base cmake g++ gcc musl-dev git ninja curl &&
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain $RUST_TARGET &&
              source ~/.cargo/env &&
              pip install maturin patchelf &&
              maturin build --release -i ${TARGET_PYTHON} --out dist
            "
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: pyrxing/dist
          if-no-files-found: ignore
          overwrite: true

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: copy README.md
        run: |
          cp README.md pyrxing
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: pyrxing
          key: ${{ runner.os }}-${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: pyrxing
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: pyrxing/dist
          if-no-files-found: ignore
          overwrite: true

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: copy README.md
        run: |
          cp README.md pyrxing
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: pyrxing
          key: ${{ runner.os }}-${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: pyrxing
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: pyrxing/dist
          if-no-files-found: ignore
          overwrite: true

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: copy README.md
        run: |
          cp README.md pyrxing
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          working-directory: pyrxing
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: pyrxing/dist
          if-no-files-found: ignore
          overwrite: true

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, musllinux, macos, windows, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
